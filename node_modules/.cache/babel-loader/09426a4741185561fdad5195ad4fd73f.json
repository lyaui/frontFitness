{"remainingRequest":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js!/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js!/Users/huangpei-yu/Front-Gym/src/store/comments.js","dependencies":[{"path":"/Users/huangpei-yu/Front-Gym/src/store/comments.js","mtime":1584522551859},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _defineProperty from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from \"@/firebase/init\";\nimport Vue from 'vue';\nexport default {\n  namespaced: true,\n  state: function state() {\n    return {\n      comments: []\n    };\n  },\n  actions: {\n    //獲得全部評論\n    getComments: function getComments(_ref, id) {\n      var commit = _ref.commit;\n      // commit('setComments', [])\n      return db.collection('comments').where('toId', '==', id).get().then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(snapshots) {\n          var comments;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return snapshots.docs.map(function (snapshot) {\n                    var comment = _objectSpread({\n                      id: snapshot.id\n                    }, snapshot.data()); //獲取使用者資料\n\n\n                    db.collection('users').doc(comment.user).get().then(\n                    /*#__PURE__*/\n                    function () {\n                      var _ref3 = _asyncToGenerator(\n                      /*#__PURE__*/\n                      regeneratorRuntime.mark(function _callee(snapshot) {\n                        return regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                _context.next = 2;\n                                return snapshot.data();\n\n                              case 2:\n                                comment.user = _context.sent;\n\n                              case 3:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                      return function (_x2) {\n                        return _ref3.apply(this, arguments);\n                      };\n                    }());\n                    return comment;\n                  });\n\n                case 2:\n                  comments = _context2.sent;\n                  commit('setComments', comments);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    //新增評論\n    createComment: function createComment(_ref4, _ref5) {\n      var commit = _ref4.commit;\n      var comment = _ref5.comment,\n          user = _ref5.user;\n      comment.timestamp = Date.now();\n      db.collection('comments').add(comment).then(function (docRef) {\n        //新增並且更新課程總評分(cloud function)\n        comment.user = user.profile;\n        comment.id = docRef.id;\n        commit('addComment', comment);\n      });\n    },\n    //更新評論\n    updateComment: function updateComment(_ref6, comment) {\n      var commit = _ref6.commit;\n      comment.timestamp = Date.now();\n      db.collection('comments').doc(comment.id).update({\n        comment: comment.comment,\n        rating: comment.rating,\n        timestamp: comment.timestamp\n      }).then(function () {\n        commit('changeComment', comment);\n      });\n    }\n  },\n  mutations: {\n    //儲存全部評論\n    setComments: function setComments(state, comments) {\n      state.comments = comments;\n    },\n    //新增comment到list中以即時顯現更新畫面\n    addComment: function addComment(state, comment) {\n      state.comments.push(comment);\n    },\n    // 更新comment以即時顯現更新畫面\n    changeComment: function changeComment(state, comment) {\n      var index = state.comments.findIndex(function (item) {\n        return item.id === comment.id;\n      }); // state.comments[index] = comment\n      // or強制改寫\n\n      Vue.set(state.comments[index], 'comment', comment.comment);\n      Vue.set(state.comments[index], 'rating', comment.rating);\n      Vue.set(state.comments[index], 'timestamp', comment.timestamp);\n    }\n  }\n};",{"version":3,"sources":["/Users/huangpei-yu/Front-Gym/src/store/comments.js"],"names":["db","Vue","namespaced","state","comments","actions","getComments","id","commit","collection","where","get","then","snapshots","docs","map","snapshot","comment","data","doc","user","createComment","timestamp","Date","now","add","docRef","profile","updateComment","update","rating","mutations","setComments","addComment","push","changeComment","index","findIndex","item","set"],"mappings":"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","sourcesContent":["import {\n    db\n} from \"@/firebase/init\";\nimport Vue from 'vue'\n\nexport default {\n    namespaced: true,\n    state() {\n        return {\n            comments: [],\n        }\n    },\n    actions: {\n\n        //獲得全部評論\n        getComments({\n            commit\n        }, id) {\n            // commit('setComments', [])\n            return db.collection('comments')\n                .where('toId', '==', id)\n                .get()\n                .then(async snapshots => {\n                    //獲取所有評論\n                    const comments = await snapshots.docs.map(snapshot => {\n                        let comment = {\n                            id: snapshot.id,\n                            ...snapshot.data()\n                        }\n\n                        //獲取使用者資料\n                        db.collection('users')\n                            .doc(comment.user)\n                            .get()\n                            .then(async snapshot => {\n                                comment.user = await snapshot.data()\n                            })\n                        return comment\n                    });\n                    commit('setComments', comments)\n                })\n        },\n\n\n\n        //新增評論\n        createComment({\n            commit\n        }, {\n            comment,\n            user\n        }) {\n            comment.timestamp = Date.now()\n            db.collection('comments')\n                .add(comment)\n                .then(docRef => {\n                        //新增並且更新課程總評分(cloud function)\n                        comment.user = user.profile\n                        comment.id = docRef.id\n                        commit('addComment', comment)\n                    }\n                )\n        },\n\n        //更新評論\n        updateComment({\n                commit\n            },\n            comment,\n        ) {\n            comment.timestamp = Date.now()\n            db.collection('comments')\n                .doc(comment.id)\n                .update({\n                    comment: comment.comment,\n                    rating: comment.rating,\n                    timestamp: comment.timestamp\n                })\n                .then(() => {\n                    commit('changeComment', comment)\n                })\n        }\n    },\n    mutations: {\n        //儲存全部評論\n        setComments(state, comments) {\n            state.comments = comments\n        },\n\n        //新增comment到list中以即時顯現更新畫面\n        addComment(state, comment) {\n            state.comments.push(comment)\n        },\n\n        // 更新comment以即時顯現更新畫面\n        changeComment(state, comment) {\n            const index = state.comments.findIndex(item => item.id === comment.id)\n            // state.comments[index] = comment\n            // or強制改寫\n            Vue.set(state.comments[index], 'comment', comment.comment)\n            Vue.set(state.comments[index], 'rating', comment.rating)\n            Vue.set(state.comments[index], 'timestamp', comment.timestamp)\n        }\n    }\n\n}"]}]}
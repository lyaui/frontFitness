{"remainingRequest":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js!/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js!/Users/huangpei-yu/Front-Gym/src/store/courses.js","dependencies":[{"path":"/Users/huangpei-yu/Front-Gym/src/store/courses.js","mtime":1584914541608},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _mutations;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from \"@/firebase/init\";\nimport Vue from 'vue';\nexport default {\n  namespaced: true,\n  state: function state() {\n    return {\n      cat: '所有課程',\n      status: '',\n      course: {},\n      courses: [],\n      coach: {},\n      pagination: {\n        totalLength: null,\n        itemCount: 7,\n        lastItem: null,\n        previousFirstItems: []\n      }\n    };\n  },\n  getters: {\n    currentPage: function currentPage(state) {\n      if (!state.pagination.previousFirstItems) {\n        return 1;\n      }\n\n      return state.pagination.previousFirstItems.length;\n    }\n  },\n  actions: {\n    getPageLength: function getPageLength(_ref) {\n      var commit = _ref.commit;\n      db.collection('courses').get().then(function (snapshots) {\n        commit('setLength', snapshots.size);\n      });\n    },\n    //獲得全部課程\n    getCourses: function getCourses(_ref2, cat) {\n      var commit = _ref2.commit;\n      commit('loading', true, {\n        root: true\n      });\n      commit('setCourses', []);\n      var query; //無分類的情況\n\n      if (cat === '所有課程') {\n        query = db.collection('courses').get();\n      } else {\n        //分類的情況\n        query = db.collection('courses').where(\"categorySelected\", \"==\", cat).get();\n      }\n\n      return query.then(function (snapshots) {\n        var courses = snapshots.docs.map(function (snapshot) {\n          return _objectSpread({}, snapshot.data(), {\n            id: snapshot.id\n          });\n        });\n        commit('setCat', cat);\n        commit('setCourses', courses);\n        commit('loading', false, {\n          root: true\n        });\n        return courses;\n      });\n    },\n    //獲得特定課程\n    getCourseById: function getCourseById(_ref3, courseId) {\n      var commit = _ref3.commit;\n      commit('loading', true, {\n        root: true\n      });\n      commit('setCourse', {});\n      db.collection('courses').doc(courseId).get().then(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(snapshot) {\n          var course;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  course = snapshot.data();\n                  course.id = snapshot.id; //獲取教練的資料\n\n                  _context.next = 4;\n                  return db.collection(\"coaches\").where(\"name\", \"==\", course.coach).get().then(function (snapshots) {\n                    //where會回傳陣列，但搜尋的姓名為唯一值，因此選第0項\n                    var coach = snapshots.docs.map(function (snapshot) {\n                      return _objectSpread({}, snapshot.data());\n                    });\n                    commit.apply(void 0, ['setCoach'].concat(_toConsumableArray(coach)));\n                  });\n\n                case 4:\n                  commit('setCourse', course);\n                  commit('loading', false, {\n                    root: true\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n    //獲得分頁課程\n    getCoursesLimit: function getCoursesLimit(_ref5) {\n      var commit = _ref5.commit,\n          state = _ref5.state;\n      commit('loading', true, {\n        root: true\n      });\n      commit('setCourses', []);\n      commit('clearPreviousFirstItem');\n      return db.collection(\"courses\").orderBy(\"categorySelected\", \"desc\").limit(state.pagination.itemCount).get().then(function (snapshots) {\n        var courses = snapshots.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        commit('setCourses', courses);\n        commit('setLastItem', snapshots.docs[snapshots.docs.length - 1]);\n        commit('setPreviousFirstItem', snapshots.docs[0]);\n        commit('loading', false, {\n          root: true\n        });\n        return courses;\n      });\n    },\n    //下一頁/上一頁\n    getMoreCourses: function getMoreCourses(_ref6, page) {\n      var commit = _ref6.commit,\n          state = _ref6.state;\n      commit('loading', true, {\n        root: true\n      });\n      var query; //下一頁\n\n      if (page === 'next') {\n        query = db.collection('courses').orderBy(\"categorySelected\", \"desc\").startAfter(state.pagination.lastItem).limit(state.pagination.itemCount);\n      } else {\n        //前一頁\n        var lastItemIndex = state.pagination.previousFirstItems.length - 1;\n        var previousItem = state.pagination.previousFirstItems[lastItemIndex - 1];\n\n        if (!previousItem) {\n          return;\n        }\n\n        state.pagination.previousFirstItems.splice(lastItemIndex, 1);\n        query = db.collection('courses').orderBy(\"categorySelected\", \"desc\").startAt(previousItem).limit(state.pagination.itemCount);\n      }\n\n      return query.get().then(function (snapshots) {\n        if (snapshots.docs.length === 0) {\n          return [];\n        }\n\n        var courses = snapshots.docs.map(function (doc) {\n          return _objectSpread({}, doc.data(), {\n            id: doc.id\n          });\n        });\n        commit('setCourses', courses);\n        commit('setLastItem', snapshots.docs[snapshots.docs.length - 1]);\n\n        if (page === 'next') {\n          commit('setPreviousFirstItem', snapshots.docs[0]);\n        }\n\n        commit('loading', false, {\n          root: true\n        });\n        return courses;\n      });\n    },\n    //創建新課程\n    createCourse: function createCourse(_, course) {\n      db.collection('courses').add(course).catch(function (err) {\n        return err;\n      });\n    },\n    //移除課程\n    removeCourse: function removeCourse(_ref7, id) {\n      var commit = _ref7.commit;\n      return db.collection('courses').doc(id).delete().then(function () {\n        commit('setCourseDelete', id);\n      });\n    },\n    //更新課程\n    updateCourse: function updateCourse(_ref8, _ref9) {\n      var commit = _ref8.commit;\n      var id = _ref9.id,\n          course = _ref9.course;\n\n      if (course && id) {\n        db.collection(\"courses\").doc(id).update(course).then(function () {\n          commit('setCurCourse', {\n            id: id,\n            course: course\n          }), commit('setCurCourse', course);\n        });\n      }\n    }\n  },\n  mutations: (_mutations = {\n    //儲存分類\n    setCat: function setCat(state, cat) {\n      state.cat = cat;\n    },\n    //儲存全部課程\n    setCourses: function setCourses(state, courses) {\n      state.courses = courses;\n    },\n    //儲存單一課程\n    setCourse: function setCourse(state, course) {\n      state.course = course;\n    },\n    //儲存教練\n    setCoach: function setCoach(state, coach) {\n      state.coach = coach;\n    },\n    //即時更新畫面（編輯課程）\n    setCurCourse: function setCurCourse(state, _ref10) {\n      var id = _ref10.id,\n          course = _ref10.course;\n      //Vue.set(state.object, key, value) or Vue.set(object, prop, value)\n      state.courses = state.courses.findIndex(function (course) {\n        return course.id === id;\n      });\n      Vue.set(state.courses, index, course);\n    },\n    //即時更新畫面（移除課程）\n    setCourseDelete: function setCourseDelete(state, id) {\n      state.courses = state.courses.filter(function (course) {\n        return course.id !== id;\n      });\n    }\n  }, _defineProperty(_mutations, \"setCurCourse\", function setCurCourse(state, course) {\n    Vue.set(state.course, 'avgRating', course.avgRating);\n  }), _defineProperty(_mutations, \"setLastItem\", function setLastItem(state, course) {\n    state.pagination.lastItem = course;\n  }), _defineProperty(_mutations, \"setPreviousFirstItem\", function setPreviousFirstItem(state, course) {\n    state.pagination.previousFirstItems.push(course);\n  }), _defineProperty(_mutations, \"clearPreviousFirstItem\", function clearPreviousFirstItem(state) {\n    state.pagination.previousFirstItems = [];\n  }), _defineProperty(_mutations, \"setLength\", function setLength(state, length) {\n    var totalPage = length / state.pagination.itemCount;\n\n    if (length % state.pagination.itemCount == 0) {\n      state.pagination.totalLength = totalPage;\n    } else {\n      state.pagination.totalLength = Math.ceil(totalPage);\n    }\n  }), _defineProperty(_mutations, \"setStatus\", function setStatus(state, status) {\n    state.status = status;\n  }), _mutations)\n};",{"version":3,"sources":["/Users/huangpei-yu/Front-Gym/src/store/courses.js"],"names":["db","Vue","namespaced","state","cat","status","course","courses","coach","pagination","totalLength","itemCount","lastItem","previousFirstItems","getters","currentPage","length","actions","getPageLength","commit","collection","get","then","snapshots","size","getCourses","root","query","where","docs","map","snapshot","data","id","getCourseById","courseId","doc","getCoursesLimit","orderBy","limit","getMoreCourses","page","startAfter","lastItemIndex","previousItem","splice","startAt","createCourse","_","add","catch","err","removeCourse","delete","updateCourse","update","mutations","setCat","setCourses","setCourse","setCoach","setCurCourse","findIndex","set","index","setCourseDelete","filter","avgRating","push","totalPage","Math","ceil"],"mappings":";;;;;;;;;;;;;;;AAAA,SACIA,EADJ,QAEO,iBAFP;AAGA,OAAOC,GAAP,MAAgB,KAAhB;AAGA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXC,EAAAA,KAFW,mBAEH;AACJ,WAAO;AACHC,MAAAA,GAAG,EAAE,MADF;AAEHC,MAAAA,MAAM,EAAE,EAFL;AAGHC,MAAAA,MAAM,EAAE,EAHL;AAIHC,MAAAA,OAAO,EAAE,EAJN;AAKHC,MAAAA,KAAK,EAAE,EALJ;AAMHC,MAAAA,UAAU,EAAE;AACRC,QAAAA,WAAW,EAAE,IADL;AAERC,QAAAA,SAAS,EAAE,CAFH;AAGRC,QAAAA,QAAQ,EAAE,IAHF;AAIRC,QAAAA,kBAAkB,EAAE;AAJZ;AANT,KAAP;AAaH,GAhBU;AAiBXC,EAAAA,OAAO,EAAE;AACLC,IAAAA,WADK,uBACOZ,KADP,EACc;AACf,UAAI,CAACA,KAAK,CAACM,UAAN,CAAiBI,kBAAtB,EAA0C;AACtC,eAAO,CAAP;AACH;;AACD,aAAOV,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,CAAoCG,MAA3C;AACH;AANI,GAjBE;AAyBXC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aADK,+BAGF;AAAA,UADCC,MACD,QADCA,MACD;AACCnB,MAAAA,EAAE,CAACoB,UAAH,CAAc,SAAd,EAAyBC,GAAzB,GAA+BC,IAA/B,CAAoC,UAAAC,SAAS,EAAI;AAC7CJ,QAAAA,MAAM,CAAC,WAAD,EAAcI,SAAS,CAACC,IAAxB,CAAN;AACH,OAFD;AAGH,KAPI;AASL;AACAC,IAAAA,UAVK,6BAYFrB,GAZE,EAYG;AAAA,UADJe,MACI,SADJA,MACI;AACJA,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACpBO,QAAAA,IAAI,EAAE;AADc,OAAlB,CAAN;AAGAP,MAAAA,MAAM,CAAC,YAAD,EAAe,EAAf,CAAN;AACA,UAAIQ,KAAJ,CALI,CAMJ;;AACA,UAAIvB,GAAG,KAAK,MAAZ,EAAoB;AAChBuB,QAAAA,KAAK,GAAG3B,EAAE,CACLoB,UADG,CACQ,SADR,EAEHC,GAFG,EAAR;AAGH,OAJD,MAIO;AACH;AACAM,QAAAA,KAAK,GAAG3B,EAAE,CACLoB,UADG,CACQ,SADR,EAEHQ,KAFG,CAEG,kBAFH,EAEuB,IAFvB,EAE6BxB,GAF7B,EAGHiB,GAHG,EAAR;AAIH;;AACD,aAAOM,KAAK,CACPL,IADE,CACG,UAAAC,SAAS,EAAI;AACf,YAAMhB,OAAO,GAAGgB,SAAS,CAACM,IAAV,CAAeC,GAAf,CAAmB,UAAAC,QAAQ;AAAA,mCACpCA,QAAQ,CAACC,IAAT,EADoC;AAEvCC,YAAAA,EAAE,EAAEF,QAAQ,CAACE;AAF0B;AAAA,SAA3B,CAAhB;AAIAd,QAAAA,MAAM,CAAC,QAAD,EAAWf,GAAX,CAAN;AACAe,QAAAA,MAAM,CAAC,YAAD,EAAeZ,OAAf,CAAN;AACAY,QAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACrBO,UAAAA,IAAI,EAAE;AADe,SAAnB,CAAN;AAGA,eAAOnB,OAAP;AACH,OAZE,CAAP;AAaH,KA3CI;AA6CL;AACA2B,IAAAA,aA9CK,gCAgDFC,QAhDE,EAgDQ;AAAA,UADThB,MACS,SADTA,MACS;AAETA,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACpBO,QAAAA,IAAI,EAAE;AADc,OAAlB,CAAN;AAGAP,MAAAA,MAAM,CAAC,WAAD,EAAc,EAAd,CAAN;AACAnB,MAAAA,EAAE,CACGoB,UADL,CACgB,SADhB,EAEKgB,GAFL,CAESD,QAFT,EAGKd,GAHL,GAIKC,IAJL;AAAA;AAAA;AAAA;AAAA;AAAA,gCAIU,iBAAMS,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACIzB,kBAAAA,MADJ,GACayB,QAAQ,CAACC,IAAT,EADb;AAEF1B,kBAAAA,MAAM,CAAC2B,EAAP,GAAYF,QAAQ,CAACE,EAArB,CAFE,CAIF;;AAJE;AAAA,yBAKIjC,EAAE,CAACoB,UAAH,CAAc,SAAd,EACDQ,KADC,CACK,MADL,EACa,IADb,EACmBtB,MAAM,CAACE,KAD1B,EAEDa,GAFC,GAGDC,IAHC,CAGI,UAAAC,SAAS,EAAI;AACf;AACA,wBAAMf,KAAK,GAAGe,SAAS,CAACM,IAAV,CAAeC,GAAf,CAAmB,UAAAC,QAAQ;AAAA,+CAClCA,QAAQ,CAACC,IAAT,EADkC;AAAA,qBAA3B,CAAd;AAGAb,oBAAAA,MAAM,MAAN,UAAO,UAAP,4BAAsBX,KAAtB;AACH,mBATC,CALJ;;AAAA;AAgBFW,kBAAAA,MAAM,CAAC,WAAD,EAAcb,MAAd,CAAN;AACAa,kBAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACrBO,oBAAAA,IAAI,EAAE;AADe,mBAAnB,CAAN;;AAjBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJV;;AAAA;AAAA;AAAA;AAAA;AAyBH,KA/EI;AAiFL;AACAW,IAAAA,eAlFK,kCAqFF;AAAA,UAFClB,MAED,SAFCA,MAED;AAAA,UADChB,KACD,SADCA,KACD;AACCgB,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACpBO,QAAAA,IAAI,EAAE;AADc,OAAlB,CAAN;AAGAP,MAAAA,MAAM,CAAC,YAAD,EAAe,EAAf,CAAN;AACAA,MAAAA,MAAM,CAAC,wBAAD,CAAN;AAEA,aAAOnB,EAAE,CACJoB,UADE,CACS,SADT,EAEFkB,OAFE,CAEM,kBAFN,EAE0B,MAF1B,EAGFC,KAHE,CAGIpC,KAAK,CAACM,UAAN,CAAiBE,SAHrB,EAIFU,GAJE,GAKFC,IALE,CAKG,UAAAC,SAAS,EAAI;AACf,YAAMhB,OAAO,GAAGgB,SAAS,CAACM,IAAV,CAAeC,GAAf,CAAmB,UAAAM,GAAG;AAAA;AAClCH,YAAAA,EAAE,EAAEG,GAAG,CAACH;AAD0B,aAE/BG,GAAG,CAACJ,IAAJ,EAF+B;AAAA,SAAtB,CAAhB;AAIAb,QAAAA,MAAM,CAAC,YAAD,EAAeZ,OAAf,CAAN;AACAY,QAAAA,MAAM,CAAC,aAAD,EAAgBI,SAAS,CAACM,IAAV,CAAeN,SAAS,CAACM,IAAV,CAAeb,MAAf,GAAwB,CAAvC,CAAhB,CAAN;AACAG,QAAAA,MAAM,CAAC,sBAAD,EAAyBI,SAAS,CAACM,IAAV,CAAe,CAAf,CAAzB,CAAN;AACAV,QAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACrBO,UAAAA,IAAI,EAAE;AADe,SAAnB,CAAN;AAGA,eAAOnB,OAAP;AACH,OAjBE,CAAP;AAkBH,KA9GI;AAgHL;AACAiC,IAAAA,cAjHK,iCAoHFC,IApHE,EAoHI;AAAA,UAFLtB,MAEK,SAFLA,MAEK;AAAA,UADLhB,KACK,SADLA,KACK;AACLgB,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACpBO,QAAAA,IAAI,EAAE;AADc,OAAlB,CAAN;AAGA,UAAIC,KAAJ,CAJK,CAML;;AACA,UAAIc,IAAI,KAAK,MAAb,EAAqB;AACjBd,QAAAA,KAAK,GAAG3B,EAAE,CACLoB,UADG,CACQ,SADR,EAEHkB,OAFG,CAEK,kBAFL,EAEyB,MAFzB,EAGHI,UAHG,CAGQvC,KAAK,CAACM,UAAN,CAAiBG,QAHzB,EAKH2B,KALG,CAKGpC,KAAK,CAACM,UAAN,CAAiBE,SALpB,CAAR;AAMH,OAPD,MAOO;AACH;AACA,YAAMgC,aAAa,GAAGxC,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,CAAoCG,MAApC,GAA6C,CAAnE;AACA,YAAM4B,YAAY,GAAGzC,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,CAAoC8B,aAAa,GAAG,CAApD,CAArB;;AAEA,YAAI,CAACC,YAAL,EAAmB;AACf;AACH;;AAEDzC,QAAAA,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,CAAoCgC,MAApC,CAA2CF,aAA3C,EAA0D,CAA1D;AACAhB,QAAAA,KAAK,GAAG3B,EAAE,CACLoB,UADG,CACQ,SADR,EAEHkB,OAFG,CAEK,kBAFL,EAEyB,MAFzB,EAGHQ,OAHG,CAGKF,YAHL,EAIHL,KAJG,CAIGpC,KAAK,CAACM,UAAN,CAAiBE,SAJpB,CAAR;AAKH;;AAED,aAAOgB,KAAK,CACPN,GADE,GAEFC,IAFE,CAEG,UAAAC,SAAS,EAAI;AACf,YAAIA,SAAS,CAACM,IAAV,CAAeb,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,iBAAO,EAAP;AACH;;AAED,YAAMT,OAAO,GAAGgB,SAAS,CAACM,IAAV,CAAeC,GAAf,CAAmB,UAAAM,GAAG;AAAA,mCAC/BA,GAAG,CAACJ,IAAJ,EAD+B;AAElCC,YAAAA,EAAE,EAAEG,GAAG,CAACH;AAF0B;AAAA,SAAtB,CAAhB;AAIAd,QAAAA,MAAM,CAAC,YAAD,EAAeZ,OAAf,CAAN;AACAY,QAAAA,MAAM,CAAC,aAAD,EAAgBI,SAAS,CAACM,IAAV,CAAeN,SAAS,CAACM,IAAV,CAAeb,MAAf,GAAwB,CAAvC,CAAhB,CAAN;;AAEA,YAAIyB,IAAI,KAAK,MAAb,EAAqB;AACjBtB,UAAAA,MAAM,CAAC,sBAAD,EAAyBI,SAAS,CAACM,IAAV,CAAe,CAAf,CAAzB,CAAN;AACH;;AACDV,QAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACrBO,UAAAA,IAAI,EAAE;AADe,SAAnB,CAAN;AAIA,eAAOnB,OAAP;AACH,OAtBE,CAAP;AAwBH,KA3KI;AA6KL;AACAwC,IAAAA,YA9KK,wBA8KQC,CA9KR,EA8KW1C,MA9KX,EA8KmB;AACpBN,MAAAA,EAAE,CACGoB,UADL,CACgB,SADhB,EAEK6B,GAFL,CAES3C,MAFT,EAGK4C,KAHL,CAGW,UAAAC,GAAG;AAAA,eACNA,GADM;AAAA,OAHd;AAKH,KApLI;AAwLL;AACAC,IAAAA,YAzLK,+BA2LFnB,EA3LE,EA2LE;AAAA,UADHd,MACG,SADHA,MACG;AACH,aAAOnB,EAAE,CAACoB,UAAH,CAAc,SAAd,EACFgB,GADE,CACEH,EADF,EAEFoB,MAFE,GAGF/B,IAHE,CAGG,YAAM;AACRH,QAAAA,MAAM,CAAC,iBAAD,EAAoBc,EAApB,CAAN;AACH,OALE,CAAP;AAMH,KAlMI;AAoML;AACAqB,IAAAA,YArMK,sCA0MF;AAAA,UAJCnC,MAID,SAJCA,MAID;AAAA,UAFCc,EAED,SAFCA,EAED;AAAA,UADC3B,MACD,SADCA,MACD;;AACC,UAAIA,MAAM,IAAI2B,EAAd,EAAkB;AACdjC,QAAAA,EAAE,CAACoB,UAAH,CAAc,SAAd,EACKgB,GADL,CACSH,EADT,EAEKsB,MAFL,CAEYjD,MAFZ,EAGKgB,IAHL,CAGU,YAAM;AACRH,UAAAA,MAAM,CAAC,cAAD,EAAiB;AACfc,YAAAA,EAAE,EAAFA,EADe;AAEf3B,YAAAA,MAAM,EAANA;AAFe,WAAjB,CAAN,EAIIa,MAAM,CAAC,cAAD,EAAiBb,MAAjB,CAJV;AAKH,SATL;AAUH;AACJ;AAvNI,GAzBE;AAkPXkD,EAAAA,SAAS;AACL;AACAC,IAAAA,MAFK,kBAEEtD,KAFF,EAESC,GAFT,EAEc;AACfD,MAAAA,KAAK,CAACC,GAAN,GAAYA,GAAZ;AACH,KAJI;AAKL;AACAsD,IAAAA,UANK,sBAMMvD,KANN,EAMaI,OANb,EAMsB;AACvBJ,MAAAA,KAAK,CAACI,OAAN,GAAgBA,OAAhB;AACH,KARI;AAUL;AACAoD,IAAAA,SAXK,qBAWKxD,KAXL,EAWYG,MAXZ,EAWoB;AACrBH,MAAAA,KAAK,CAACG,MAAN,GAAeA,MAAf;AACH,KAbI;AAeL;AACAsD,IAAAA,QAhBK,oBAgBIzD,KAhBJ,EAgBWK,KAhBX,EAgBkB;AACnBL,MAAAA,KAAK,CAACK,KAAN,GAAcA,KAAd;AACH,KAlBI;AAoBL;AACAqD,IAAAA,YArBK,wBAqBQ1D,KArBR,UAwBF;AAAA,UAFC8B,EAED,UAFCA,EAED;AAAA,UADC3B,MACD,UADCA,MACD;AACC;AACAH,MAAAA,KAAK,CAACI,OAAN,GAAgBJ,KAAK,CAACI,OAAN,CAAcuD,SAAd,CAAwB,UAAAxD,MAAM;AAAA,eAAIA,MAAM,CAAC2B,EAAP,KAAcA,EAAlB;AAAA,OAA9B,CAAhB;AACAhC,MAAAA,GAAG,CAAC8D,GAAJ,CAAQ5D,KAAK,CAACI,OAAd,EAAuByD,KAAvB,EAA8B1D,MAA9B;AACH,KA5BI;AA8BL;AAEA2D,IAAAA,eAhCK,2BAgCW9D,KAhCX,EAgCkB8B,EAhClB,EAgCsB;AACvB9B,MAAAA,KAAK,CAACI,OAAN,GAAgBJ,KAAK,CAACI,OAAN,CAAc2D,MAAd,CAAqB,UAAA5D,MAAM;AAAA,eAAIA,MAAM,CAAC2B,EAAP,KAAcA,EAAlB;AAAA,OAA3B,CAAhB;AACH;AAlCI,uEAqCQ9B,KArCR,EAqCeG,MArCf,EAqCuB;AACxBL,IAAAA,GAAG,CAAC8D,GAAJ,CAAQ5D,KAAK,CAACG,MAAd,EAAsB,WAAtB,EAAmCA,MAAM,CAAC6D,SAA1C;AACH,GAvCI,mEAyCOhE,KAzCP,EAyCcG,MAzCd,EAyCsB;AACvBH,IAAAA,KAAK,CAACM,UAAN,CAAiBG,QAAjB,GAA4BN,MAA5B;AACH,GA3CI,qFA4CgBH,KA5ChB,EA4CuBG,MA5CvB,EA4C+B;AAChCH,IAAAA,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,CAAoCuD,IAApC,CAAyC9D,MAAzC;AACH,GA9CI,yFA+CkBH,KA/ClB,EA+CyB;AAC1BA,IAAAA,KAAK,CAACM,UAAN,CAAiBI,kBAAjB,GAAsC,EAAtC;AACH,GAjDI,+DAkDKV,KAlDL,EAkDYa,MAlDZ,EAkDoB;AACrB,QAAIqD,SAAS,GAAIrD,MAAM,GAAGb,KAAK,CAACM,UAAN,CAAiBE,SAA3C;;AACA,QAAIK,MAAM,GAAGb,KAAK,CAACM,UAAN,CAAiBE,SAA1B,IAAuC,CAA3C,EAA8C;AAC1CR,MAAAA,KAAK,CAACM,UAAN,CAAiBC,WAAjB,GAA+B2D,SAA/B;AACH,KAFD,MAEO;AACHlE,MAAAA,KAAK,CAACM,UAAN,CAAiBC,WAAjB,GAA+B4D,IAAI,CAACC,IAAL,CAAUF,SAAV,CAA/B;AACH;AACJ,GAzDI,+DA0DKlE,KA1DL,EA0DYE,MA1DZ,EA0DoB;AACrBF,IAAAA,KAAK,CAACE,MAAN,GAAeA,MAAf;AACH,GA5DI;AAlPE,CAAf","sourcesContent":["import {\n    db\n} from \"@/firebase/init\";\nimport Vue from 'vue'\n\n\nexport default {\n    namespaced: true,\n    state() {\n        return {\n            cat: '所有課程',\n            status: '',\n            course: {},\n            courses: [],\n            coach: {},\n            pagination: {\n                totalLength: null,\n                itemCount: 7,\n                lastItem: null,\n                previousFirstItems: [],\n            }\n        }\n    },\n    getters: {\n        currentPage(state) {\n            if (!state.pagination.previousFirstItems) {\n                return 1\n            }\n            return state.pagination.previousFirstItems.length\n        }\n    },\n    actions: {\n        getPageLength({\n            commit\n        }) {\n            db.collection('courses').get().then(snapshots => {\n                commit('setLength', snapshots.size)\n            })\n        },\n\n        //獲得全部課程\n        getCourses({\n            commit\n        }, cat) {\n            commit('loading', true, {\n                root: true\n            });\n            commit('setCourses', [])\n            let query;\n            //無分類的情況\n            if (cat === '所有課程') {\n                query = db\n                    .collection('courses')\n                    .get()\n            } else {\n                //分類的情況\n                query = db\n                    .collection('courses')\n                    .where(\"categorySelected\", \"==\", cat)\n                    .get()\n            }\n            return query\n                .then(snapshots => {\n                    const courses = snapshots.docs.map(snapshot => ({\n                        ...snapshot.data(),\n                        id: snapshot.id\n                    }));\n                    commit('setCat', cat)\n                    commit('setCourses', courses)\n                    commit('loading', false, {\n                        root: true\n                    })\n                    return courses;\n                })\n        },\n\n        //獲得特定課程\n        getCourseById({\n            commit\n        }, courseId) {\n\n            commit('loading', true, {\n                root: true\n            })\n            commit('setCourse', {})\n            db\n                .collection('courses')\n                .doc(courseId)\n                .get()\n                .then(async snapshot => {\n                    const course = snapshot.data();\n                    course.id = snapshot.id\n\n                    //獲取教練的資料\n                    await db.collection(\"coaches\")\n                        .where(\"name\", \"==\", course.coach)\n                        .get()\n                        .then(snapshots => {\n                            //where會回傳陣列，但搜尋的姓名為唯一值，因此選第0項\n                            const coach = snapshots.docs.map(snapshot => ({\n                                ...snapshot.data()\n                            }));\n                            commit('setCoach', ...coach)\n                        })\n\n                    commit('setCourse', course)\n                    commit('loading', false, {\n                        root: true\n                    })\n                })\n        },\n\n        //獲得分頁課程\n        getCoursesLimit({\n            commit,\n            state\n        }) {\n            commit('loading', true, {\n                root: true\n            })\n            commit('setCourses', [])\n            commit('clearPreviousFirstItem')\n\n            return db\n                .collection(\"courses\")\n                .orderBy(\"categorySelected\", \"desc\")\n                .limit(state.pagination.itemCount)\n                .get()\n                .then(snapshots => {\n                    const courses = snapshots.docs.map(doc => ({\n                        id: doc.id,\n                        ...doc.data()\n                    }))\n                    commit('setCourses', courses);\n                    commit('setLastItem', snapshots.docs[snapshots.docs.length - 1])\n                    commit('setPreviousFirstItem', snapshots.docs[0])\n                    commit('loading', false, {\n                        root: true\n                    })\n                    return courses\n                })\n        },\n\n        //下一頁/上一頁\n        getMoreCourses({\n            commit,\n            state\n        }, page) {\n            commit('loading', true, {\n                root: true\n            })\n            let query;\n\n            //下一頁\n            if (page === 'next') {\n                query = db\n                    .collection('courses')\n                    .orderBy(\"categorySelected\", \"desc\")\n                    .startAfter(state.pagination.lastItem)\n\n                    .limit(state.pagination.itemCount)\n            } else {\n                //前一頁\n                const lastItemIndex = state.pagination.previousFirstItems.length - 1\n                const previousItem = state.pagination.previousFirstItems[lastItemIndex - 1]\n\n                if (!previousItem) {\n                    return\n                }\n\n                state.pagination.previousFirstItems.splice(lastItemIndex, 1)\n                query = db\n                    .collection('courses')\n                    .orderBy(\"categorySelected\", \"desc\")\n                    .startAt(previousItem)\n                    .limit(state.pagination.itemCount)\n            }\n\n            return query\n                .get()\n                .then(snapshots => {\n                    if (snapshots.docs.length === 0) {\n                        return []\n                    }\n\n                    const courses = snapshots.docs.map(doc => ({\n                        ...doc.data(),\n                        id: doc.id\n                    }))\n                    commit('setCourses', courses)\n                    commit('setLastItem', snapshots.docs[snapshots.docs.length - 1])\n\n                    if (page === 'next') {\n                        commit('setPreviousFirstItem', snapshots.docs[0])\n                    }\n                    commit('loading', false, {\n                        root: true\n                    })\n\n                    return courses\n                })\n\n        },\n\n        //創建新課程\n        createCourse(_, course) {\n            db\n                .collection('courses')\n                .add(course)\n                .catch(err =>\n                    err)\n        },\n\n\n\n        //移除課程\n        removeCourse({\n            commit\n        }, id) {\n            return db.collection('courses')\n                .doc(id)\n                .delete()\n                .then(() => {\n                    commit('setCourseDelete', id)\n                })\n        },\n\n        //更新課程\n        updateCourse({\n            commit\n        }, {\n            id,\n            course\n        }) {\n            if (course && id) {\n                db.collection(\"courses\")\n                    .doc(id)\n                    .update(course)\n                    .then(() => {\n                        commit('setCurCourse', {\n                                id,\n                                course\n                            }),\n                            commit('setCurCourse', course)\n                    })\n            }\n        },\n    },\n    mutations: {\n        //儲存分類\n        setCat(state, cat) {\n            state.cat = cat\n        },\n        //儲存全部課程\n        setCourses(state, courses) {\n            state.courses = courses\n        },\n\n        //儲存單一課程\n        setCourse(state, course) {\n            state.course = course\n        },\n\n        //儲存教練\n        setCoach(state, coach) {\n            state.coach = coach\n        },\n\n        //即時更新畫面（編輯課程）\n        setCurCourse(state, {\n            id,\n            course\n        }) {\n            //Vue.set(state.object, key, value) or Vue.set(object, prop, value)\n            state.courses = state.courses.findIndex(course => course.id === id)\n            Vue.set(state.courses, index, course)\n        },\n\n        //即時更新畫面（移除課程）\n\n        setCourseDelete(state, id) {\n            state.courses = state.courses.filter(course => course.id !== id)\n        },\n\n        //即時更新（新增評價）\n        setCurCourse(state, course) {\n            Vue.set(state.course, 'avgRating', course.avgRating)\n        },\n\n        setLastItem(state, course) {\n            state.pagination.lastItem = course\n        },\n        setPreviousFirstItem(state, course) {\n            state.pagination.previousFirstItems.push(course)\n        },\n        clearPreviousFirstItem(state) {\n            state.pagination.previousFirstItems = []\n        },\n        setLength(state, length) {\n            let totalPage = (length / state.pagination.itemCount);\n            if (length % state.pagination.itemCount == 0) {\n                state.pagination.totalLength = totalPage\n            } else {\n                state.pagination.totalLength = Math.ceil(totalPage)\n            }\n        },\n        setStatus(state, status) {\n            state.status = status\n        },\n    }\n}"]}]}
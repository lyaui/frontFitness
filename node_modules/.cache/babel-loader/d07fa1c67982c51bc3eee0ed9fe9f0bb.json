{"remainingRequest":"/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js!/Users/huangpei-yu/Front-Gym/src/store/checkout.js","dependencies":[{"path":"/Users/huangpei-yu/Front-Gym/src/store/checkout.js","mtime":1584879716114},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from \"@/firebase/init\";\nexport default {\n  namespaced: true,\n  state: function state() {\n    return {\n      payment: {},\n      payments: []\n    };\n  },\n  actions: {\n    //取得所有訂單\n    getPayments: function getPayments(_ref) {\n      var commit = _ref.commit;\n      commit('loading', true, {\n        root: true\n      });\n      commit('setPayments', []);\n      return db.collection('payments').orderBy('createdAt', 'desc').get().then(function (snapshots) {\n        var payments = snapshots.docs.map(function (snapshot) {\n          return _objectSpread({\n            id: snapshot.id\n          }, snapshot.data());\n        });\n        commit('setPayments', payments);\n        commit('loading', false, {\n          root: true\n        });\n        return payments;\n      });\n    },\n    //取得特定訂單\n    getPaymentById: function getPaymentById(_ref2, paymentId) {\n      var commit = _ref2.commit;\n      commit('loading', true, {\n        root: true\n      });\n      db.collection('payments').doc(paymentId).get().then(function (snapshot) {\n        var payment = snapshot.data();\n        payment.id = snapshot.id;\n        commit('setPayment', payment);\n        commit('loading', false, {\n          root: true\n        });\n      });\n    },\n    //新增訂單\n    createPayment: function createPayment(_ref3, payment) {\n      var commit = _ref3.commit;\n      payment.status = \"尚未付款\";\n      payment.createdAt = Date.now();\n      db.collection('payments').add(payment).then(function (docRef) {\n        payment.id = docRef.id; //回傳新增訂單id作為頁面路徑\n\n        commit('setPayment', payment);\n      });\n    },\n    //付款更新訂單狀態\n    finishPayment: function finishPayment(_ref4, id) {\n      var commit = _ref4.commit;\n      db.collection('payments').doc(id).update({\n        status: '付款完成',\n        finishedAt: Date.now()\n      }).then(function () {\n        return commit('changePaymentsStatus', {\n          id: id,\n          status: '付款完成',\n          finishedAt: Date.now()\n        });\n      });\n    }\n  },\n  mutations: {\n    //儲存全部訂單\n    setPayments: function setPayments(state, payments) {\n      state.payments = payments;\n    },\n    //儲存單一訂單\n    setPayment: function setPayment(state, payment) {\n      state.payment = payment;\n    },\n    //更改訂單狀態\n    changePaymentsStatus: function changePaymentsStatus(state, _ref5) {\n      var status = _ref5.status,\n          finishedAt = _ref5.finishedAt;\n      state.payment.status = status;\n      state.payment.finishedAt = finishedAt;\n    },\n    //送出訂單或離開頁面清空\n    clearPayment: function clearPayment(state) {\n      console.log('yo');\n      state.payment = {};\n    }\n  }\n};",{"version":3,"sources":["/Users/huangpei-yu/Front-Gym/src/store/checkout.js"],"names":["db","namespaced","state","payment","payments","actions","getPayments","commit","root","collection","orderBy","get","then","snapshots","docs","map","snapshot","id","data","getPaymentById","paymentId","doc","createPayment","status","createdAt","Date","now","add","docRef","finishPayment","update","finishedAt","mutations","setPayments","setPayment","changePaymentsStatus","clearPayment","console","log"],"mappings":"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","sourcesContent":["import {\n    db\n} from \"@/firebase/init\";\n\nexport default {\n    namespaced: true,\n    state() {\n        return {\n            payment: {},\n            payments: []\n        }\n    },\n    actions: {\n        //取得所有訂單\n        getPayments({\n            commit\n        }) {\n            commit('loading', true, {\n                root: true\n            })\n            commit('setPayments', [])\n            return db.collection('payments')\n                .orderBy('createdAt', 'desc')\n                .get()\n                .then(snapshots => {\n                    const payments = snapshots.docs.map(snapshot => ({\n                        id: snapshot.id,\n                        ...snapshot.data()\n                    }))\n                    commit('setPayments', payments)\n                    commit('loading', false, {\n                        root: true\n                    })\n                    return payments\n                })\n\n        },\n\n        //取得特定訂單\n        getPaymentById({\n            commit\n        }, paymentId) {\n            commit('loading', true, {\n                root: true\n            })\n            db.collection('payments')\n                .doc(paymentId)\n                .get()\n                .then(snapshot => {\n                    const payment = snapshot.data()\n                    payment.id = snapshot.id\n                    commit('setPayment', payment)\n                    commit('loading', false, {\n                        root: true\n                    })\n                })\n        },\n\n        //新增訂單\n        createPayment({\n            commit\n        }, payment) {\n            payment.status = \"尚未付款\"\n            payment.createdAt = Date.now()\n            db.collection('payments')\n                .add(payment)\n                .then(docRef => {\n                    payment.id = docRef.id;\n                    //回傳新增訂單id作為頁面路徑\n                    commit('setPayment', payment)\n                })\n        },\n\n        //付款更新訂單狀態\n        finishPayment({\n            commit\n        }, id) {\n            db.collection('payments')\n                .doc(id)\n                .update({\n                    status: '付款完成',\n                    finishedAt: Date.now()\n                })\n                .then(() => commit('changePaymentsStatus', {\n                    id: id,\n                    status: '付款完成',\n                    finishedAt: Date.now()\n                }))\n        }\n\n    },\n    mutations: {\n        //儲存全部訂單\n        setPayments(state, payments) {\n            state.payments = payments\n        },\n\n        //儲存單一訂單\n        setPayment(state, payment) {\n            state.payment = payment\n        },\n\n        //更改訂單狀態\n        changePaymentsStatus(state, {\n            status,\n            finishedAt\n        }) {\n            state.payment.status = status\n            state.payment.finishedAt = finishedAt\n        },\n\n        //送出訂單或離開頁面清空\n        clearPayment(state) {\n            console.log('yo');\n            \n            state.payment = {}\n        }\n    }\n}"]}]}
{"remainingRequest":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js!/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js!/Users/huangpei-yu/Front-Gym/src/store/checkout.js","dependencies":[{"path":"/Users/huangpei-yu/Front-Gym/src/store/checkout.js","mtime":1584956451801},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangpei-yu/Front-Gym/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/huangpei-yu/Front-Gym/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from '@/firebase/init';\nexport default {\n  namespaced: true,\n  state: function state() {\n    return {\n      payment: {},\n      payments: []\n    };\n  },\n  actions: {\n    // 取得所有訂單\n    getPayments: function getPayments(_ref) {\n      var commit = _ref.commit;\n      commit('loading', true, {\n        root: true\n      });\n      commit('setPayments', []);\n      return db.collection('payments').orderBy('createdAt', 'desc').get().then(function (snapshots) {\n        var payments = snapshots.docs.map(function (snapshot) {\n          return _objectSpread({\n            id: snapshot.id\n          }, snapshot.data());\n        });\n        commit('setPayments', payments);\n        commit('loading', false, {\n          root: true\n        });\n        return payments;\n      });\n    },\n    // 取得特定訂單\n    getPaymentById: function getPaymentById(_ref2, paymentId) {\n      var commit = _ref2.commit;\n      commit('loading', true, {\n        root: true\n      });\n      db.collection('payments').doc(paymentId).get().then(function (snapshot) {\n        var payment = snapshot.data();\n        payment.id = snapshot.id;\n        commit('setPayment', payment);\n        commit('loading', false, {\n          root: true\n        });\n      });\n    },\n    // 新增訂單\n    createPayment: function createPayment(_ref3, payment) {\n      var commit = _ref3.commit;\n      payment.status = '尚未付款';\n      payment.createdAt = Date.now();\n      db.collection('payments').add(payment).then(function (docRef) {\n        payment.id = docRef.id; // 回傳新增訂單id作為頁面路徑\n\n        commit('setPayment', payment);\n      });\n    },\n    // 付款更新訂單狀態\n    finishPayment: function finishPayment(_ref4, id) {\n      var commit = _ref4.commit;\n      db.collection('payments').doc(id).update({\n        status: '付款完成',\n        finishedAt: Date.now()\n      }).then(function () {\n        return commit('changePaymentsStatus', {\n          id: id,\n          status: '付款完成',\n          finishedAt: Date.now()\n        });\n      });\n    }\n  },\n  mutations: {\n    // 儲存全部訂單\n    setPayments: function setPayments(state, payments) {\n      state.payments = payments;\n    },\n    // 儲存單一訂單\n    setPayment: function setPayment(state, payment) {\n      state.payment = payment;\n    },\n    // 更改訂單狀態\n    changePaymentsStatus: function changePaymentsStatus(state, _ref5) {\n      var status = _ref5.status,\n          finishedAt = _ref5.finishedAt;\n      state.payment.status = status;\n      state.payment.finishedAt = finishedAt;\n    },\n    // 送出訂單或離開頁面清空\n    clearPayment: function clearPayment(state) {\n      state.payment = {};\n    }\n  }\n};",{"version":3,"sources":["/Users/huangpei-yu/Front-Gym/src/store/checkout.js"],"names":["db","namespaced","state","payment","payments","actions","getPayments","commit","root","collection","orderBy","get","then","snapshots","docs","map","snapshot","id","data","getPaymentById","paymentId","doc","createPayment","status","createdAt","Date","now","add","docRef","finishPayment","update","finishedAt","mutations","setPayments","setPayment","changePaymentsStatus","clearPayment"],"mappings":";;;;;;;;;AAAA,SACEA,EADF,QAEO,iBAFP;AAIA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbC,EAAAA,KAFa,mBAEL;AACN,WAAO;AACLC,MAAAA,OAAO,EAAE,EADJ;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GAPY;AAQbC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,WAFO,6BAIJ;AAAA,UADDC,MACC,QADDA,MACC;AACDA,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACtBC,QAAAA,IAAI,EAAE;AADgB,OAAlB,CAAN;AAGAD,MAAAA,MAAM,CAAC,aAAD,EAAgB,EAAhB,CAAN;AACA,aAAOP,EAAE,CAACS,UAAH,CAAc,UAAd,EACJC,OADI,CACI,WADJ,EACiB,MADjB,EAEJC,GAFI,GAGJC,IAHI,CAGC,UAACC,SAAD,EAAe;AACnB,YAAMT,QAAQ,GAAGS,SAAS,CAACC,IAAV,CAAeC,GAAf,CAAmB,UAACC,QAAD;AAAA;AAClCC,YAAAA,EAAE,EAAED,QAAQ,CAACC;AADqB,aAE/BD,QAAQ,CAACE,IAAT,EAF+B;AAAA,SAAnB,CAAjB;AAIAX,QAAAA,MAAM,CAAC,aAAD,EAAgBH,QAAhB,CAAN;AACAG,QAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACvBC,UAAAA,IAAI,EAAE;AADiB,SAAnB,CAAN;AAGA,eAAOJ,QAAP;AACD,OAbI,CAAP;AAcD,KAvBM;AAyBP;AACAe,IAAAA,cA1BO,iCA4BJC,SA5BI,EA4BO;AAAA,UADZb,MACY,SADZA,MACY;AACZA,MAAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,EAAkB;AACtBC,QAAAA,IAAI,EAAE;AADgB,OAAlB,CAAN;AAGAR,MAAAA,EAAE,CAACS,UAAH,CAAc,UAAd,EACGY,GADH,CACOD,SADP,EAEGT,GAFH,GAGGC,IAHH,CAGQ,UAACI,QAAD,EAAc;AAClB,YAAMb,OAAO,GAAGa,QAAQ,CAACE,IAAT,EAAhB;AACAf,QAAAA,OAAO,CAACc,EAAR,GAAaD,QAAQ,CAACC,EAAtB;AACAV,QAAAA,MAAM,CAAC,YAAD,EAAeJ,OAAf,CAAN;AACAI,QAAAA,MAAM,CAAC,SAAD,EAAY,KAAZ,EAAmB;AACvBC,UAAAA,IAAI,EAAE;AADiB,SAAnB,CAAN;AAGD,OAVH;AAWD,KA3CM;AA6CP;AACAc,IAAAA,aA9CO,gCAgDJnB,OAhDI,EAgDK;AAAA,UADVI,MACU,SADVA,MACU;AACVJ,MAAAA,OAAO,CAACoB,MAAR,GAAiB,MAAjB;AACApB,MAAAA,OAAO,CAACqB,SAAR,GAAoBC,IAAI,CAACC,GAAL,EAApB;AACA1B,MAAAA,EAAE,CAACS,UAAH,CAAc,UAAd,EACGkB,GADH,CACOxB,OADP,EAEGS,IAFH,CAEQ,UAACgB,MAAD,EAAY;AAChBzB,QAAAA,OAAO,CAACc,EAAR,GAAaW,MAAM,CAACX,EAApB,CADgB,CAEhB;;AACAV,QAAAA,MAAM,CAAC,YAAD,EAAeJ,OAAf,CAAN;AACD,OANH;AAOD,KA1DM;AA4DP;AACA0B,IAAAA,aA7DO,gCA+DJZ,EA/DI,EA+DA;AAAA,UADLV,MACK,SADLA,MACK;AACLP,MAAAA,EAAE,CAACS,UAAH,CAAc,UAAd,EACGY,GADH,CACOJ,EADP,EAEGa,MAFH,CAEU;AACNP,QAAAA,MAAM,EAAE,MADF;AAENQ,QAAAA,UAAU,EAAEN,IAAI,CAACC,GAAL;AAFN,OAFV,EAMGd,IANH,CAMQ;AAAA,eAAML,MAAM,CAAC,sBAAD,EAAyB;AACzCU,UAAAA,EAAE,EAAFA,EADyC;AAEzCM,UAAAA,MAAM,EAAE,MAFiC;AAGzCQ,UAAAA,UAAU,EAAEN,IAAI,CAACC,GAAL;AAH6B,SAAzB,CAAZ;AAAA,OANR;AAWD;AA3EM,GARI;AAsFbM,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,WAFS,uBAEG/B,KAFH,EAEUE,QAFV,EAEoB;AAC3BF,MAAAA,KAAK,CAACE,QAAN,GAAiBA,QAAjB;AACD,KAJQ;AAMT;AACA8B,IAAAA,UAPS,sBAOEhC,KAPF,EAOSC,OAPT,EAOkB;AACzBD,MAAAA,KAAK,CAACC,OAAN,GAAgBA,OAAhB;AACD,KATQ;AAWT;AACAgC,IAAAA,oBAZS,gCAYYjC,KAZZ,SAeN;AAAA,UAFDqB,MAEC,SAFDA,MAEC;AAAA,UADDQ,UACC,SADDA,UACC;AACD7B,MAAAA,KAAK,CAACC,OAAN,CAAcoB,MAAd,GAAuBA,MAAvB;AACArB,MAAAA,KAAK,CAACC,OAAN,CAAc4B,UAAd,GAA2BA,UAA3B;AACD,KAlBQ;AAoBT;AACAK,IAAAA,YArBS,wBAqBIlC,KArBJ,EAqBW;AAClBA,MAAAA,KAAK,CAACC,OAAN,GAAgB,EAAhB;AACD;AAvBQ;AAtFE,CAAf","sourcesContent":["import {\n  db,\n} from '@/firebase/init';\n\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      payment: {},\n      payments: [],\n    };\n  },\n  actions: {\n    // 取得所有訂單\n    getPayments({\n      commit,\n    }) {\n      commit('loading', true, {\n        root: true,\n      });\n      commit('setPayments', []);\n      return db.collection('payments')\n        .orderBy('createdAt', 'desc')\n        .get()\n        .then((snapshots) => {\n          const payments = snapshots.docs.map((snapshot) => ({\n            id: snapshot.id,\n            ...snapshot.data(),\n          }));\n          commit('setPayments', payments);\n          commit('loading', false, {\n            root: true,\n          });\n          return payments;\n        });\n    },\n\n    // 取得特定訂單\n    getPaymentById({\n      commit,\n    }, paymentId) {\n      commit('loading', true, {\n        root: true,\n      });\n      db.collection('payments')\n        .doc(paymentId)\n        .get()\n        .then((snapshot) => {\n          const payment = snapshot.data();\n          payment.id = snapshot.id;\n          commit('setPayment', payment);\n          commit('loading', false, {\n            root: true,\n          });\n        });\n    },\n\n    // 新增訂單\n    createPayment({\n      commit,\n    }, payment) {\n      payment.status = '尚未付款';\n      payment.createdAt = Date.now();\n      db.collection('payments')\n        .add(payment)\n        .then((docRef) => {\n          payment.id = docRef.id;\n          // 回傳新增訂單id作為頁面路徑\n          commit('setPayment', payment);\n        });\n    },\n\n    // 付款更新訂單狀態\n    finishPayment({\n      commit,\n    }, id) {\n      db.collection('payments')\n        .doc(id)\n        .update({\n          status: '付款完成',\n          finishedAt: Date.now(),\n        })\n        .then(() => commit('changePaymentsStatus', {\n          id,\n          status: '付款完成',\n          finishedAt: Date.now(),\n        }));\n    },\n\n  },\n  mutations: {\n    // 儲存全部訂單\n    setPayments(state, payments) {\n      state.payments = payments;\n    },\n\n    // 儲存單一訂單\n    setPayment(state, payment) {\n      state.payment = payment;\n    },\n\n    // 更改訂單狀態\n    changePaymentsStatus(state, {\n      status,\n      finishedAt,\n    }) {\n      state.payment.status = status;\n      state.payment.finishedAt = finishedAt;\n    },\n\n    // 送出訂單或離開頁面清空\n    clearPayment(state) {\n      state.payment = {};\n    },\n  },\n};\n"]}]}